# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EqDistant
                                 A QGIS plugin
 Plugin to generate median line using Equidistant method
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-10-11
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Ivan Busthomi
        email                : ivanbusthomi@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QPushButton, QFileDialog
from qgis.core import QgsMapLayerProxyModel, QgsMapLayerType, Qgis, QgsProject
from qgis.core import QgsVectorFileWriter, QgsVectorLayer
from osgeo import ogr

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .eq_distant_dockwidget import EqDistantDockWidget
from .library import *
import os.path
import logging

from .mymaptool import PointTool

class EqDistant:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'EqDistant_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&EqDistant')
        self.toolbar = self.iface.addToolBar(u'EqDistant')
        self.toolbar.setObjectName(u'EqDistant')

        #print "** INITIALIZING EqDistant"

        self.processing_flag = False

        self.list_valid_layers = []
        self.list_invalid_layers = []
        self.input_layer_a = ''
        self.input_layer_b = ''
        self.list_feature_a = ''
        self.list_feature_b = ''
        self.crs = ''
        self.input_mode = ''
        self.save_location = ''

        self.dt_layer = ''
        self.valid_dt = ''
        self.merged_pt_layer = ''
        self.p_layer_a = ''
        self.p_layer_b = ''

        self.msg_widget = ''

        self.process_flag = False
        self.pluginIsActive = False
        self.dockwidget = None

        self.intermediary_group = ''

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('EqDistant', message)


    def add_action(
                self,
                icon_path,
                text,
                callback,
                enabled_flag=True,
                add_to_menu=True,
                add_to_toolbar=True,
                status_tip=None,
                whats_this=None,
                parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/EqDistant/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'EqDistant Plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING EqDistant"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        try:
            self.iface.mapCanvas().layersChanged.disconnect()
        except Exception:
            pass
        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD EqDistant"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&EqDistant'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING EqDistant"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget is None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = EqDistantDockWidget()
                self.valid_layer_check()
                self.layer_input()

                self.dockwidget.btn_browse_dir.pressed.connect(
                    self.browse_save_location)
                self.dockwidget.mcb_input_a.currentIndexChanged.connect(
                    self.layer_input)
                self.dockwidget.mcb_input_b.currentIndexChanged.connect(
                    self.layer_input)
                self.iface.mapCanvas().layersChanged.connect(
                    self.valid_layer_check)
                self.dockwidget.folder_path.textChanged.connect(
                    self.folder_validation)
                self.dockwidget.btn_preprocess.pressed.connect(
                    self.preprocess_input)
                self.dockwidget.btn_process.pressed.connect(self.process)

                self.dockwidget.pushButton.pressed.connect(self.customMapTool)

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()


    def browse_save_location(self):
        """Find location where to save the result.
        """
        # home = os.path.expanduser("~")
        self.save_location = QFileDialog.getSaveFileName(
            None,
            "Save Result As",
            "EqDistant Result",
            "GeoPackage (*.gpkg)")[0]
        self.dockwidget.folder_path.setText(self.save_location)


    def folder_validation(self):
        """Validate save loaction and enable process button.
        """
        folder_location = self.dockwidget.folder_path.text()
        if os.path.exists(os.path.dirname(folder_location)):
            self.dockwidget.btn_process.setEnabled(True)
        else:
            self.dockwidget.btn_process.setEnabled(False)


    def layer_input(self):
        """Define layer input.
        """
        self.input_layer_a = self.dockwidget.mcb_input_a.currentLayer()
        self.input_layer_b = self.dockwidget.mcb_input_b.currentLayer()
        try:
            self.input_layer_a.selectionChanged.connect(
                self.feature_selection_a)
            self.input_layer_b.selectionChanged.connect(
                self.feature_selection_b)
            self.check_layer_input()
        except AttributeError:
            pass


    def feature_selection_a(self):
        """Feature selection slot.
        """
        try:
            if self.input_layer_a.selectedFeatureCount() > 0:
                self.dockwidget.selected_input_a.setEnabled(True)
            else:
                self.dockwidget.selected_input_a.setEnabled(False)
                self.dockwidget.selected_input_a.setChecked(False)
        except AttributeError:
            pass


    def feature_selection_b(self):
        """Feature selection slot.
        """
        try:
            if self.input_layer_b.selectedFeatureCount() > 0:
                self.dockwidget.selected_input_b.setEnabled(True)
            else:
                self.dockwidget.selected_input_b.setEnabled(False)
                self.dockwidget.selected_input_b.setChecked(False)
        except AttributeError:
            pass


    def check_layer_input(self):
        """Check whether input validity.
        """
        self.feature_selection_a()
        self.feature_selection_b()
        # enable pre process button if input layers are different
        if self.input_layer_a == self.input_layer_b:
            self.dockwidget.btn_preprocess.setEnabled(False)
        else:
            self.dockwidget.btn_preprocess.setEnabled(True)
        # enable interpolation on non geographic CRS
        if self.input_layer_a.crs().isGeographic():
            self.dockwidget.interpolate_input_a.setEnabled(False)
        else:
            self.dockwidget.interpolate_input_a.setEnabled(True)
        if self.input_layer_b.crs().isGeographic():
            self.dockwidget.interpolate_input_b.setEnabled(False)
        else:
            self.dockwidget.interpolate_input_b.setEnabled(True)


    def valid_layer_check(self):
        """Filter invalid layer and notify user.
        """
        self.list_valid_layers = []
        for layer in self.iface.mapCanvas().layers():
            if layer.type() == QgsMapLayerType.VectorLayer:
                if layer.geometryType() == 1:
                    self.list_valid_layers.append(layer)

        self.list_invalid_layers = [
            layer for layer in self.iface.mapCanvas().layers() \
                if layer not in self.list_valid_layers]

        self.dockwidget.mcb_input_a.setExceptedLayerList(
            self.list_invalid_layers)
        self.dockwidget.mcb_input_b.setExceptedLayerList(
            self.list_invalid_layers)
        if len(self.list_valid_layers) < 2:
            self.iface.messageBar().pushMessage(
                "Warning:",
                "Not enough input layers detected. \
                    Please add more input layer(s).",
                Qgis.Warning,
                duration=3)
            return
        # self.iface.messageBar().pushMessage(
        #     "Info:", "Input layer successfully loaded.",
        #     Qgis.Success, duration=3)
        self.dockwidget.mcb_input_a.setLayer(self.list_valid_layers[0])
        try:
            self.dockwidget.mcb_input_b.setLayer(self.list_valid_layers[1])
        except IndexError:
            self.dockwidget.mcb_input_b.setLayer(self.list_valid_layers[0])


    def preprocess_input(self):
        """Preprocess input before generating the median line.
        """
        if self.dockwidget.selected_input_a.isChecked():
            self.list_feature_a = [
                feat for feat in self.input_layer_a.selectedFeatures()]
        else:
            self.list_feature_a = [
                feat for feat in self.input_layer_a.getFeatures()]
        if self.dockwidget.selected_input_b.isChecked():
            self.list_feature_b = [
                feat for feat in self.input_layer_b.selectedFeatures()]
        else:
            self.list_feature_b = [
                feat for feat in self.input_layer_b.getFeatures()]
        # check input CRS
        crs_a = self.input_layer_a.crs().authid()
        crs_b = self.input_layer_b.crs().authid()
        if crs_a == crs_b:
            self.crs = crs_a
        else:
            self.iface.messageBar().pushMessage(
                "Warning:",
                "Input files should be in the same coordinate system.",
                Qgis.Critical,
                duration=3
            )
            self.process_flag = False
        # check feature intersection to determine boundary mode
        intersection_status = False
        for feature_a in self.list_feature_a:
            for feature_b in self.list_feature_b:
                if feature_a.geometry().intersects(feature_b.geometry()):
                    intersection_status = True
        if intersection_status:
            self.input_mode = "adjacent"
        else:
            self.input_mode = "opposite"
        # check interpolation option
        if self.dockwidget.interpolate_input_a.isChecked():
            unit_a = self.dockwidget.interpolate_unit_a.currentIndex()
            if unit_a == 0:
                interpolate_interval_a = int(
                    self.dockwidget.interpolate_value_a.text())
            elif unit_a == 1:
                interpolate_interval_a = int(
                    self.dockwidget.interpolate_value_a.text())*1852
        else:
            interpolate_interval_a = 0
        if self.dockwidget.interpolate_input_b.isChecked():
            unit_b = self.dockwidget.interpolate_unit_b.currentIndex()
            if unit_b == 0:
                interpolate_interval_b = int(
                    self.dockwidget.interpolate_value_b.text())
            elif unit_b == 1:
                interpolate_interval_b = int(
                    self.dockwidget.interpolate_value_b.text())*1852
        else:
            interpolate_interval_b = 0
        # create point layer as preprocessed input
        self.p_layer_a = line_to_point_layer_new(
            self.list_feature_a,
            self.crs,
            f"Point Layer {self.input_layer_a.name()}",
            id_name="point_id",
            id_prefix="A",
            interpolate_interval=interpolate_interval_a
        )
        self.p_layer_b = line_to_point_layer_new(
            self.list_feature_b,
            self.crs,
            f"Point Layer {self.input_layer_b.name()}",
            id_name="point_id",
            id_prefix="B",
            interpolate_interval=interpolate_interval_b
        )
        # merge point layer
        self.merged_pt_layer = merge_point_layers(
            self.p_layer_a, self.p_layer_b)
        # create voronoi diagaram and delaunay triangulation layer
        # vd_layer = create_voronoi(merged_pt_layer)
        self.dt_layer = create_delaunay_triangulation(self.merged_pt_layer)
        # valid delaunay triangulation area
        self.valid_dt = valid_delaunay_triangulation(
            self.dt_layer,
            self.list_feature_a,
            self.list_feature_b
            )
        self.msg_widget = self.push_message()
        self.iface.messageBar().pushWidget(self.msg_widget, Qgis.Info)
        self.processing_flag = True
        self.valid_dt.selectionChanged.connect(self.valid_area_selection)
        group_name = "Intermediary Layer"
        root = QgsProject.instance().layerTreeRoot()
        self.intermediary_group = root.addGroup(group_name)
        QgsProject.instance().addMapLayer(self.valid_dt, False)
        self.intermediary_group.addLayer(self.valid_dt)
        self.iface.setActiveLayer(self.valid_dt)


    def push_message(self):
        """Custom message.
        """
        msg_title = "Select Area"
        msg_text = "Select an area where median line is going to be generated."
        msg_widget = self.iface.messageBar().createMessage(msg_title, msg_text)
        msg_button = QPushButton(msg_widget)
        btn_text = "Select Feature"
        msg_button.setText(btn_text)
        msg_button.pressed.connect(self.iface.actionSelect().trigger)
        msg_widget.layout().addWidget(msg_button)
        return msg_widget


    def valid_area_selection(self):
        """Check if valid area is selected or not.
        """
        if self.processing_flag:
            if self.valid_dt.selectedFeatureCount() == 1:
                self.dockwidget.btn_process.setEnabled(True)
                self.dockwidget.outputGroup.setEnabled(True)
                try:
                    self.iface.messageBar().popWidget(self.msg_widget)
                    self.iface.messageBar().pushMessage(
                        "Info:", "Area selection success.",
                        Qgis.Success, duration=3
                    )
                except RuntimeError:
                    self.iface.messageBar().pushMessage(
                        "Info:", "Area selection success.",
                        Qgis.Success, duration=3
                    )
            else:
                self.dockwidget.btn_process.setEnabled(False)
                self.dockwidget.outputGroup.setEnabled(False)
                self.msg_widget = self.push_message()
                self.iface.messageBar().pushWidget(self.msg_widget, Qgis.Info)


    def process(self):
        """Generate median line with preprocessed input.
        """
        vd_layer = create_voronoi(self.merged_pt_layer)

        if self.input_mode == "opposite":
            median_layer = create_median_line_opposite(
                vd_layer,
                self.list_feature_a,
                self.list_feature_b,
                self.crs
            )
        elif self.input_mode == "adjacent":
            median_layer = create_median_line_adjacent(
                vd_layer,
                self.list_feature_a,
                self.list_feature_b,
                self.crs
            )
        # debug file
        input_layer_a_preprocessed = line_feature_list_to_layer(
            self.list_feature_a, self.crs, "Input layer A")
        input_layer_b_preprocessed = line_feature_list_to_layer(
            self.list_feature_b, self.crs, "Input layer B")
        # result layer
        list_result_layer = []
        if self.valid_dt.selectedFeatureCount() == 1:
            valid_geom = self.valid_dt.selectedFeatures()[0].geometry()
            for feat in median_layer.getFeatures():
                if feat.geometry().crosses(valid_geom):
                    median_layer.select(feat.id())
            if self.dockwidget.check_equidistant_point.isChecked():
                eq_pt_layer = create_equidistant_point(median_layer)
                list_result_layer.append(eq_pt_layer)
            if self.dockwidget.check_construction_line.isChecked():
                if not self.dockwidget.check_equidistant_point.isChecked():
                    eq_pt_layer = create_equidistant_point(median_layer)
                cl_layer = create_construction_line(
                    vd_layer, eq_pt_layer, self.merged_pt_layer)
                list_result_layer.append(cl_layer)
            if self.dockwidget.check_median_line.isChecked():
                median_layer.startEditing()
                median_layer.invertSelection()
                median_layer.deleteSelectedFeatures()
                median_layer.commitChanges()
                list_result_layer.append(median_layer)
            if self.dockwidget.check_debug_mode.isChecked():
                group_name = "Debug Layer"
                root = QgsProject.instance().layerTreeRoot()
                debug_group = root.addGroup(group_name)
                # add layer
                QgsProject.instance().addMapLayer(
                    input_layer_a_preprocessed, False)
                debug_group.addLayer(input_layer_a_preprocessed)
                QgsProject.instance().addMapLayer(
                    input_layer_b_preprocessed, False)
                debug_group.addLayer(input_layer_b_preprocessed)
                QgsProject.instance().addMapLayer(vd_layer, False)
                debug_group.addLayer(vd_layer)
                QgsProject.instance().addMapLayer(self.dt_layer, False)
                debug_group.addLayer(self.dt_layer)
                QgsProject.instance().addMapLayer(self.p_layer_a, False)
                debug_group.addLayer(self.p_layer_a)
                QgsProject.instance().addMapLayer(self.p_layer_b, False)
                debug_group.addLayer(self.p_layer_b)
        else:
            self.iface.messageBar().pushMessage(
                "Warning:",
                "Please ensure one valid area is selected.",
                Qgis.Warning,
                duration=3
            )
        if self.dockwidget.rb_saveToFolder.isChecked():
            # file_name = 'EqDistant Result.gpkg'
            # path_dir = os.path.join(self.save_location, file_name)
            for layer in list_result_layer:
                save_options = QgsVectorFileWriter.SaveVectorOptions()
                overwrite_file = QgsVectorFileWriter.CreateOrOverwriteFile
                overwrite_layer = QgsVectorFileWriter.CreateOrOverwriteLayer
                if not os.path.exists(self.save_location):
                    save_options.actionOnExistingFile = overwrite_file
                else:
                    save_options.actionOnExistingFile = overwrite_layer
                save_options.layerName = layer.name()
                QgsVectorFileWriter.writeAsVectorFormat(
                    layer, self.save_location, save_options)
            if self.dockwidget.check_load_result.isChecked():
                result_connection = ogr.Open(self.save_location)
                group_name = "Result Layer"
                root = QgsProject.instance().layerTreeRoot()
                result_group = root.addGroup(group_name)
                for layer in result_connection:
                    vlayer = QgsVectorLayer(
                        self.save_location + "|layername=" + layer.GetName(),
                        layer.GetName(),
                        'ogr'
                    )
                    QgsProject.instance().addMapLayer(vlayer, False)
                    result_group.addLayer(vlayer)
        else:
            group_name = "Result Layer"
            root = QgsProject.instance().layerTreeRoot()
            result_group = root.addGroup(group_name)
            for layer in list_result_layer:
                QgsProject.instance().addMapLayer(layer, False)
                result_group.addLayer(layer)

        self.intermediary_group.setItemVisibilityCheckedRecursive(False)
        self.processing_flag = False

    def customMapTool(self):
        print('pressed')
        tool = PointTool(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(tool)